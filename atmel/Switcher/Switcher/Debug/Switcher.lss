
Switcher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000148  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800116  00800116  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000023a  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000140  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001fe  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b4  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000108  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	30 d0       	rcall	.+96     	; 0x124 <main>
  c4:	3f c0       	rjmp	.+126    	; 0x144 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <usart_init>:
	i=(angle)*9 + 1500;
	OCR1A=i; //PB5
}

void usart_init(){
	DDRE = 0xFE; //시리얼통신을 위해 PE0핀은 RXD0로서 입력으로 설정하고, PE1 핀은 TXD0로서 출력으로 설정
  c8:	8e ef       	ldi	r24, 0xFE	; 254
  ca:	82 b9       	out	0x02, r24	; 2

	UBRR0H = baudrate>>8; // 보레이트 설정 38400 bps
  cc:	80 91 01 01 	lds	r24, 0x0101
  d0:	80 93 90 00 	sts	0x0090, r24

	UBRR0L = baudrate;
  d4:	80 91 00 01 	lds	r24, 0x0100
  d8:	89 b9       	out	0x09, r24	; 9

	UCSR0A = 0x02; // 비동기 모드, 더블 보레이트
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	8b b9       	out	0x0b, r24	; 11
	// 0000 0010 U2Xn(Double the USARTn Transmission Speed)
	//			클록의 분주비를 16에서 8로 낮추어 전송속도 2배 높이는 기능

	UCSR0B = 0x18; // 0x98 rx interrupt enable, 8 data, tx 0xD8, tx_empty 0xF8
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	8a b9       	out	0x0a, r24	; 10

	UCSR0C = 0x06; // no parity, 1 stop, 8 data
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 95 00 	sts	0x0095, r24

	temp = UDR0; // dummy read
  e8:	8c b1       	in	r24, 0x0c	; 12
  ea:	80 93 16 01 	sts	0x0116, r24
  ee:	08 95       	ret

000000f0 <tx_char>:

void tx_char(unsigned char tx_data)
{
	//시리얼포트로 데이터 송신이 완료되고 송신버퍼가 준비되었는지 검사

	while((UCSR0A&0x20) == 0x00);
  f0:	5d 9b       	sbis	0x0b, 5	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <tx_char>

	UDR0 = tx_data; //시리얼 포트를 통하여 데이터 전송
  f4:	8c b9       	out	0x0c, r24	; 12
  f6:	08 95       	ret

000000f8 <tx_string>:

}

void tx_string(unsigned char *str_data)

{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	ec 01       	movw	r28, r24

	while(*str_data != 0x00){ //문자열의 끝부분이 아니라면
  fe:	88 81       	ld	r24, Y
 100:	88 23       	and	r24, r24
 102:	29 f0       	breq	.+10     	; 0x10e <tx_string+0x16>
 104:	21 96       	adiw	r28, 0x01	; 1

		tx_char(*str_data); //시리얼포트로 한개의 문자를 송신한다.
 106:	f4 df       	rcall	.-24     	; 0xf0 <tx_char>

void tx_string(unsigned char *str_data)

{

	while(*str_data != 0x00){ //문자열의 끝부분이 아니라면
 108:	89 91       	ld	r24, Y+
 10a:	81 11       	cpse	r24, r1
 10c:	fc cf       	rjmp	.-8      	; 0x106 <tx_string+0xe>
		tx_char(*str_data); //시리얼포트로 한개의 문자를 송신한다.
		str_data++;

	}

}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <getch>:

char getch(void)
{
	while(!(UCSR0A& 0X80));
 114:	5f 9b       	sbis	0x0b, 7	; 11
 116:	fe cf       	rjmp	.-4      	; 0x114 <getch>
	return UDR0;
 118:	8c b1       	in	r24, 0x0c	; 12
}
 11a:	08 95       	ret

0000011c <putch>:

void putch(char data)
{
	while(!(UCSR0A & 0x20));
 11c:	5d 9b       	sbis	0x0b, 5	; 11
 11e:	fe cf       	rjmp	.-4      	; 0x11c <putch>
	UDR0 = data;
 120:	8c b9       	out	0x0c, r24	; 12
 122:	08 95       	ret

00000124 <main>:
	unsigned char sw;
	unsigned char *str="www.seniorcom.co.kr";

	unsigned char cha=0;
	
	PORTD = 0xff;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	82 bb       	out	0x12, r24	; 18
    DDRD = 0xf0;	// 0: input, 1: output, switch KEY1~4 : PD0~PD3
 128:	90 ef       	ldi	r25, 0xF0	; 240
 12a:	91 bb       	out	0x11, r25	; 17
	 
	int i;
	DDRC=0xFF;
 12c:	84 bb       	out	0x14, r24	; 20
	//timer_init();
	usart_init();
 12e:	cc df       	rcall	.-104    	; 0xc8 <usart_init>
		control_motor(  0); _delay_ms(1000);
		control_motor( 20); _delay_ms(1000);
		control_motor(  0); _delay_ms(1000);
		*/
		
		cha=getch();
 130:	f1 df       	rcall	.-30     	; 0x114 <getch>
		if(cha == 'a')
 132:	81 36       	cpi	r24, 0x61	; 97
 134:	21 f0       	breq	.+8      	; 0x13e <main+0x1a>
		break;
		tx_string(str); //문자열을 송신하는 프로그램
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	de df       	rcall	.-68     	; 0xf8 <tx_string>
	}
 13c:	f9 cf       	rjmp	.-14     	; 0x130 <main+0xc>
	
	while(1)
	{
		cha=getch();
 13e:	ea df       	rcall	.-44     	; 0x114 <getch>
		putch(cha);
 140:	ed df       	rcall	.-38     	; 0x11c <putch>
	}
 142:	fd cf       	rjmp	.-6      	; 0x13e <main+0x1a>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
