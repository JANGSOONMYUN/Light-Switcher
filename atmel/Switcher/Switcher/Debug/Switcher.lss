
Switcher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000218  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000385  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f3  00000000  00000000  000006fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000292  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000204  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000192  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	42 d0       	rcall	.+132    	; 0x148 <main>
  c4:	a7 c0       	rjmp	.+334    	; 0x214 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <timer_init>:
}

void putch(char data)
{
	while(!(UCSR0A & 0x20));
	UDR0 = data;
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	82 e8       	ldi	r24, 0x82	; 130
  ce:	8f bd       	out	0x2f, r24	; 47
  d0:	8a e1       	ldi	r24, 0x1A	; 26
  d2:	8e bd       	out	0x2e, r24	; 46
  d4:	8c ed       	ldi	r24, 0xDC	; 220
  d6:	95 e0       	ldi	r25, 0x05	; 5
  d8:	9b bd       	out	0x2b, r25	; 43
  da:	8a bd       	out	0x2a, r24	; 42
  dc:	8f e1       	ldi	r24, 0x1F	; 31
  de:	9e e4       	ldi	r25, 0x4E	; 78
  e0:	97 bd       	out	0x27, r25	; 39
  e2:	86 bd       	out	0x26, r24	; 38
  e4:	08 95       	ret

000000e6 <control_motor>:
  e6:	86 3a       	cpi	r24, 0xA6	; 166
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	92 07       	cpc	r25, r18
  ec:	14 f4       	brge	.+4      	; 0xf2 <control_motor+0xc>
  ee:	86 ea       	ldi	r24, 0xA6	; 166
  f0:	9f ef       	ldi	r25, 0xFF	; 255
  f2:	8b 35       	cpi	r24, 0x5B	; 91
  f4:	91 05       	cpc	r25, r1
  f6:	14 f0       	brlt	.+4      	; 0xfc <control_motor+0x16>
  f8:	8a e5       	ldi	r24, 0x5A	; 90
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	9c 01       	movw	r18, r24
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	82 0f       	add	r24, r18
 10c:	93 1f       	adc	r25, r19
 10e:	84 52       	subi	r24, 0x24	; 36
 110:	9a 4f       	sbci	r25, 0xFA	; 250
 112:	9b bd       	out	0x2b, r25	; 43
 114:	8a bd       	out	0x2a, r24	; 42
 116:	08 95       	ret

00000118 <usart_init>:
 118:	8e ef       	ldi	r24, 0xFE	; 254
 11a:	82 b9       	out	0x02, r24	; 2
 11c:	80 91 01 01 	lds	r24, 0x0101
 120:	80 93 90 00 	sts	0x0090, r24
 124:	80 91 00 01 	lds	r24, 0x0100
 128:	89 b9       	out	0x09, r24	; 9
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	88 e1       	ldi	r24, 0x18	; 24
 130:	8a b9       	out	0x0a, r24	; 10
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	80 93 95 00 	sts	0x0095, r24
 138:	8c b1       	in	r24, 0x0c	; 12
 13a:	80 93 02 01 	sts	0x0102, r24
 13e:	08 95       	ret

00000140 <getch>:
 140:	5f 9b       	sbis	0x0b, 7	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <getch>
 144:	8c b1       	in	r24, 0x0c	; 12
 146:	08 95       	ret

00000148 <main>:

int main(void)
{
	unsigned char * cha = (char*)malloc(sizeof(char) * 5);
	int angle = 0;
	PORTD = 0x00;
 148:	12 ba       	out	0x12, r1	; 18
    DDRD = 0xf0;	// 0: input, 1: output, switch KEY1~4 : PD0~PD3
 14a:	80 ef       	ldi	r24, 0xF0	; 240
 14c:	81 bb       	out	0x11, r24	; 17
	// PORTD0~2 : buttons(INPUT), PORTD4,5 : LED(OUTPUT) 
	// 0b00110000, 0x30;
	
	timer_init();
 14e:	bc df       	rcall	.-136    	; 0xc8 <timer_init>
	usart_init();
 150:	e3 df       	rcall	.-58     	; 0x118 <usart_init>
	//cli();
	//sei();
	
    while (1) 
    {
		cha=getch();
 152:	f6 df       	rcall	.-20     	; 0x140 <getch>
 154:	c8 2f       	mov	r28, r24
 156:	d0 e0       	ldi	r29, 0x00	; 0
		angle = atoi(cha);
 158:	ce 01       	movw	r24, r28
 15a:	37 d0       	rcall	.+110    	; 0x1ca <atoi>
		if((angle >= -100) && (angle <= 100))
 15c:	9c 01       	movw	r18, r24
 15e:	2c 59       	subi	r18, 0x9C	; 156
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	29 3c       	cpi	r18, 0xC9	; 201
 164:	31 05       	cpc	r19, r1
 166:	08 f4       	brcc	.+2      	; 0x16a <main+0x22>
			control_motor(angle);
 168:	be df       	rcall	.-132    	; 0xe6 <control_motor>
		
		
		if(cha=='a'){
 16a:	c1 36       	cpi	r28, 0x61	; 97
 16c:	d1 05       	cpc	r29, r1
 16e:	69 f4       	brne	.+26     	; 0x18a <main+0x42>
			control_motor(-20); _delay_ms(1000);
 170:	8c ee       	ldi	r24, 0xEC	; 236
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	b8 df       	rcall	.-144    	; 0xe6 <control_motor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	89 e6       	ldi	r24, 0x69	; 105
 17a:	98 e1       	ldi	r25, 0x18	; 24
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x34>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x3e>
 186:	00 00       	nop
 188:	e4 cf       	rjmp	.-56     	; 0x152 <main+0xa>
		}
		if(cha=='b'){
 18a:	c2 36       	cpi	r28, 0x62	; 98
 18c:	d1 05       	cpc	r29, r1
 18e:	69 f4       	brne	.+26     	; 0x1aa <main+0x62>
			control_motor(  0); _delay_ms(1000);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	a8 df       	rcall	.-176    	; 0xe6 <control_motor>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	89 e6       	ldi	r24, 0x69	; 105
 19a:	98 e1       	ldi	r25, 0x18	; 24
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x54>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x5e>
 1a6:	00 00       	nop
 1a8:	d4 cf       	rjmp	.-88     	; 0x152 <main+0xa>
		}
		if(cha=='c'){
 1aa:	c3 36       	cpi	r28, 0x63	; 99
 1ac:	d1 05       	cpc	r29, r1
 1ae:	89 f6       	brne	.-94     	; 0x152 <main+0xa>
			control_motor(  20); _delay_ms(1000);
 1b0:	84 e1       	ldi	r24, 0x14	; 20
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	98 df       	rcall	.-208    	; 0xe6 <control_motor>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	89 e6       	ldi	r24, 0x69	; 105
 1ba:	98 e1       	ldi	r25, 0x18	; 24
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x74>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x7e>
 1c6:	00 00       	nop
 1c8:	c4 cf       	rjmp	.-120    	; 0x152 <main+0xa>

000001ca <atoi>:
 1ca:	fc 01       	movw	r30, r24
 1cc:	88 27       	eor	r24, r24
 1ce:	99 27       	eor	r25, r25
 1d0:	e8 94       	clt
 1d2:	21 91       	ld	r18, Z+
 1d4:	20 32       	cpi	r18, 0x20	; 32
 1d6:	e9 f3       	breq	.-6      	; 0x1d2 <atoi+0x8>
 1d8:	29 30       	cpi	r18, 0x09	; 9
 1da:	10 f0       	brcs	.+4      	; 0x1e0 <atoi+0x16>
 1dc:	2e 30       	cpi	r18, 0x0E	; 14
 1de:	c8 f3       	brcs	.-14     	; 0x1d2 <atoi+0x8>
 1e0:	2b 32       	cpi	r18, 0x2B	; 43
 1e2:	39 f0       	breq	.+14     	; 0x1f2 <atoi+0x28>
 1e4:	2d 32       	cpi	r18, 0x2D	; 45
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <atoi+0x2a>
 1e8:	68 94       	set
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <atoi+0x28>
 1ec:	0b d0       	rcall	.+22     	; 0x204 <__mulhi_const_10>
 1ee:	82 0f       	add	r24, r18
 1f0:	91 1d       	adc	r25, r1
 1f2:	21 91       	ld	r18, Z+
 1f4:	20 53       	subi	r18, 0x30	; 48
 1f6:	2a 30       	cpi	r18, 0x0A	; 10
 1f8:	c8 f3       	brcs	.-14     	; 0x1ec <atoi+0x22>
 1fa:	1e f4       	brtc	.+6      	; 0x202 <atoi+0x38>
 1fc:	90 95       	com	r25
 1fe:	81 95       	neg	r24
 200:	9f 4f       	sbci	r25, 0xFF	; 255
 202:	08 95       	ret

00000204 <__mulhi_const_10>:
 204:	7a e0       	ldi	r23, 0x0A	; 10
 206:	97 9f       	mul	r25, r23
 208:	90 2d       	mov	r25, r0
 20a:	87 9f       	mul	r24, r23
 20c:	80 2d       	mov	r24, r0
 20e:	91 0d       	add	r25, r1
 210:	11 24       	eor	r1, r1
 212:	08 95       	ret

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
