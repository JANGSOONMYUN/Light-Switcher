
Switcher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000028f  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014e  00000000  00000000  000004e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c8  00000000  00000000  00000631  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b7  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005d  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	2a d0       	rcall	.+84     	; 0xee <main>
  9a:	60 c0       	rjmp	.+192    	; 0x15c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <timer_init>:
#define F_CPU 8000000 // 사용하는 CPU 클럭을 설정한다. delay.h를 위해 필요
#include <util/delay.h>
#include <avr/io.h>

void timer_init(){
	DDRB=0x20;   // PB5 out
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x82; // FAST PWM
  a2:	82 e8       	ldi	r24, 0x82	; 130
  a4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x1A; // 8분주=1usec
  a6:	8a e1       	ldi	r24, 0x1A	; 26
  a8:	8e bd       	out	0x2e, r24	; 46
	OCR1A=1500;  // 1500usec=0도		//인터럽트 발생위치
  aa:	8c ed       	ldi	r24, 0xDC	; 220
  ac:	95 e0       	ldi	r25, 0x05	; 5
  ae:	9b bd       	out	0x2b, r25	; 43
  b0:	8a bd       	out	0x2a, r24	; 42
	ICR1=19999;  // 1usec*20000=20000usec=50Hz =20ms	//20ms로 인터럽트 발생
  b2:	8f e1       	ldi	r24, 0x1F	; 31
  b4:	9e e4       	ldi	r25, 0x4E	; 78
  b6:	97 bd       	out	0x27, r25	; 39
  b8:	86 bd       	out	0x26, r24	; 38
  ba:	08 95       	ret

000000bc <control_motor>:
}

void control_motor(int angle){
  bc:	86 3a       	cpi	r24, 0xA6	; 166
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	92 07       	cpc	r25, r18
  c2:	14 f4       	brge	.+4      	; 0xc8 <control_motor+0xc>
  c4:	86 ea       	ldi	r24, 0xA6	; 166
  c6:	9f ef       	ldi	r25, 0xFF	; 255
  c8:	8b 35       	cpi	r24, 0x5B	; 91
  ca:	91 05       	cpc	r25, r1
  cc:	14 f0       	brlt	.+4      	; 0xd2 <control_motor+0x16>
  ce:	8a e5       	ldi	r24, 0x5A	; 90
  d0:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	if(angle<-90)angle=-90;
	if(angle> 90)angle= 90;
	i=(angle)*9 + 1500;
  d2:	9c 01       	movw	r18, r24
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	82 0f       	add	r24, r18
  e2:	93 1f       	adc	r25, r19
  e4:	84 52       	subi	r24, 0x24	; 36
  e6:	9a 4f       	sbci	r25, 0xFA	; 250
	OCR1A=i; //PB5
  e8:	9b bd       	out	0x2b, r25	; 43
  ea:	8a bd       	out	0x2a, r24	; 42
  ec:	08 95       	ret

000000ee <main>:
}

int main(void)
{
	unsigned char sw;
	PORTD = 0xff;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	82 bb       	out	0x12, r24	; 18
    DDRD = 0xf0;	// 0: input, 1: output, switch KEY1~4 : PD0~PD3
  f2:	90 ef       	ldi	r25, 0xF0	; 240
  f4:	91 bb       	out	0x11, r25	; 17
	 
	int i;
	DDRC=0xFF;
  f6:	84 bb       	out	0x14, r24	; 20
	timer_init();
  f8:	d2 df       	rcall	.-92     	; 0x9e <timer_init>
	
    while (1) 
    {
		control_motor(-20); _delay_ms(1000);
  fa:	8c ee       	ldi	r24, 0xEC	; 236
  fc:	9f ef       	ldi	r25, 0xFF	; 255
  fe:	de df       	rcall	.-68     	; 0xbc <control_motor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 e6       	ldi	r24, 0x69	; 105
 104:	98 e1       	ldi	r25, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x18>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x22>
 110:	00 00       	nop
		control_motor(  0); _delay_ms(1000);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	d2 df       	rcall	.-92     	; 0xbc <control_motor>
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	89 e6       	ldi	r24, 0x69	; 105
 11c:	98 e1       	ldi	r25, 0x18	; 24
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x30>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x3a>
 128:	00 00       	nop
		control_motor( 20); _delay_ms(1000);
 12a:	84 e1       	ldi	r24, 0x14	; 20
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	c6 df       	rcall	.-116    	; 0xbc <control_motor>
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x48>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x52>
 140:	00 00       	nop
		control_motor(  0); _delay_ms(1000);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	ba df       	rcall	.-140    	; 0xbc <control_motor>
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	89 e6       	ldi	r24, 0x69	; 105
 14c:	98 e1       	ldi	r25, 0x18	; 24
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x60>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x6a>
 158:	00 00       	nop
 15a:	cf cf       	rjmp	.-98     	; 0xfa <main+0xc>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
